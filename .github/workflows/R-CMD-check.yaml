# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches: [main, master]
  pull_request:
    branches:  [main, master]

name: R-CMD-check

env:
  R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
  _R_CHECK_FORCE_SUGGESTS_: false
  _R_CHECK_CRAN_INCOMING_REMOTE_: false
  LATEX_PACKAGES: oberdiek:grfext:environ:trimspaces:etoolbox:upquote:babel-english:pgf:xcolor:algorithms:relsize:tocbibind:appendix:tocloft:enumitem:listings:tcolorbox:collection-fontsrecommended:framed:inconsolata:microtype
  R_KEEP_PKG_SOURCE: yes
  
jobs:
  R-CMD-check:

    runs-on: ${{ matrix.config.os }}

    name: Check ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest,   r: 'release'}
          - {os: ubuntu-20.04,   r: 'release'}
          - {os: ubuntu-20.04,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-20.04,   r: '3.6'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@master
        
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Install latex
        uses: r-lib/actions/setup-tinytex@v1
        env:
          # install full prebuilt version
          TINYTEX_INSTALLER: TinyTeX

      - name: Install MPI in macOS
        run: brew install openmpi
        if: runner.os == 'macOS'

      - uses: r-lib/actions/setup-r-dependencies@master
        with:
          extra-packages: |
             rcmdcheck
        
      - name: Install latex packages
        run: |
          remotes::install_cran("tinytex")
          tinytex::tlmgr_install(pkgs = strsplit(Sys.getenv("LATEX_PACKAGES"),split=":")[[1]])
        shell: Rscript {0}
      
      - name: Check (NOT CRAN)
        if: success()
        env:
          NOT_CRAN: true
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--run-donttest","--timings"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
      
      - name: Check (CRAN)
        env:
          NOT_CRAN: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(build_args=c("--compact-vignettes=gs+qpdf"), args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

  coverage:
    needs: R-CMD-check
    name: Coverage ${{ matrix.config.os }} (${{ matrix.config.r }})
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-20.04, r: 'release'}
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@master
        
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true
          
      - name: Install latex
        uses: r-lib/actions/setup-tinytex@v1
        env:
          # install full prebuilt version
          TINYTEX_INSTALLER: TinyTeX

      - uses: r-lib/actions/setup-r-dependencies@master
        with:
          extra-packages: |
            covr
          needs: |
            coverage

      - name: Install latex packages
        run: |
          remotes::install_cran("tinytex")
          tinytex::tlmgr_install(pkgs = strsplit(Sys.getenv("LATEX_PACKAGES"),split=":")[[1]])
        shell: Rscript {0}
      
      - name: Test coverage
        if: success()
        run: |
          covr::codecov(type="all", quiet=FALSE)
        shell: Rscript {0}

  pkgdown:
    needs: R-CMD-check
    if: contains('
        refs/heads/master
        refs/heads/main
      ', github.ref) && github.event_name == 'push'
    name: pkgdown ${{ matrix.config.os }} (${{ matrix.config.r }})
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: ubuntu-20.04, r: 'release'}
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@master
        
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true
          
      - name: Install latex
        uses: r-lib/actions/setup-tinytex@v1
        env:
          # install full prebuilt version
          TINYTEX_INSTALLER: TinyTeX

      - uses: r-lib/actions/setup-r-dependencies@master
        with:
          extra-packages: |
            pkgdown
          needs: |
            website
        
      - name: Install latex packages
        run: |
          remotes::install_cran("tinytex")
          tinytex::tlmgr_install(pkgs = strsplit(Sys.getenv("LATEX_PACKAGES"),split=":")[[1]])
        shell: Rscript {0}
        
      - name: Update version
        if: success()
        run: |
          make version

      - name: Deploy package
        if: success()
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          # Commit version.R so that install_github works
          git add --force R/version.R
          git commit R/version.R --allow-empty -m "Update version.R [skip ci]"
          git push --force origin 'HEAD'
          # Commit vignette PDF to webpage
          export DEST_DIR=$(mktemp -d)
          git remote set-branches origin gh-pages
          git fetch origin gh-pages
          git worktree add --track -B gh-pages $DEST_DIR origin/gh-pages
          pushd $DEST_DIR
          Rscript -e 'file.copy(system.file("doc/irace-package.pdf",package="irace", mustWork=TRUE), "./", overwrite=TRUE)'
          git add -A .
          git commit --allow-empty -m "Regenerate user guide [skip ci]"
          git push --force origin 'HEAD:gh-pages'
          popd
          git worktree remove $DEST_DIR
          Rscript -e 'pkgdown::deploy_to_branch(new_process = FALSE)'
        shell: bash {0}
  
